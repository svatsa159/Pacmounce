using UnityEngine;
using System.Collections;
using UnityEngine.AI;

public class AIMovement : MonoBehaviour
{
    public bool active = true;
    public int walkSpeed = 10;
    public int runSpeed = 15;
    public int randomSpeed = 10;
    public float rotationSpeed = 20.0f;
    public bool reversePatrol = true;
    public Transform[] waypoints;
    public bool requireTarget = true;
    public Transform target;
    public float maxDistance = 100f;
    public NavMeshAgent agent;
    private bool initialGo = false;
    CharacterController characterController;
    private bool executeBufferState = false;
    private bool walkInRandomDirection = false;
    private int estCheckDirection = 0;
    private bool wpCountdown = false;
    private int wpPatrol = 0;
    void Start()
    {
        StartCoroutine(Initialize());
    }
    IEnumerator Initialize()
    {
        characterController = gameObject.GetComponent<CharacterController>();
        initialGo = true;
        yield return null;
    }
    void Update()
    {
        if (!active || !initialGo)
        {
            return;
        }
        else
        {
            AIMove();
        }
    }
    void AIMove()
    {
        if ((!target) && (requireTarget))
        {
            return;
        }
        float distance = Vector3.Distance(transform.position, target.position);
        if (distance<maxDistance)
        {
            chase();
        }
        else
        {
            Patrol();
        }
    }
    void Patrol()
    {
        Vector3 destination = CurrentPath();
        Vector3 moveToward = destination - transform.position;
        float distance = Vector3.Distance(transform.position, destination);
        MoveTowards(moveToward);
        if (distance <= 1.5f)
        {
            NewPath();
        }
    }
    Vector3 CurrentPath()
    {
        return waypoints[wpPatrol].position;
    }
    void NewPath()
    {
        if (!wpCountdown)
        {
            wpPatrol++;
            if (wpPatrol >= waypoints.GetLength(0))
            {
                if (reversePatrol)
                {
                    wpCountdown = true;
                    wpPatrol -= 2;
                }
                else
                {
                    wpPatrol = 0;
                }
            }
        }
        else if (reversePatrol)
        {
            wpPatrol--;
            if (wpPatrol < 0)
            {
                wpCountdown = false;
                wpPatrol = 1;
            }
        }
    }
    void MoveTowards(Vector3 direction)
    {
        direction.y = 0;
        int speed = walkSpeed;
        if (walkInRandomDirection)
        {
            speed = randomSpeed;
        }
        if (executeBufferState)
        {
            speed = runSpeed;
        }
        transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(direction), rotationSpeed * Time.deltaTime);
        transform.eulerAngles = new Vector3(0, transform.eulerAngles.y, 0);
        Vector3 forward = transform.TransformDirection(Vector3.forward);
        float speedModifier = Vector3.Dot(forward, direction.normalized);
        speedModifier = Mathf.Clamp01(speedModifier);
        direction = forward * speed * speedModifier;
        characterController.Move(direction * Time.deltaTime);
    }
    private void chase()
    {
        agent.SetDestination(target.position);
    }
}

Rota.cs
 using UnityEngine;
 using System.Collections;
 
 public class Rota : MonoBehaviour {
     public float horizontalSpeed = 2.0F;
     public float verticalSpeed = 2.0F;
     void Update() {
         float h = horizontalSpeed * Input.GetAxis("Mouse X");
         float v = verticalSpeed * Input.GetAxis("Mouse Y");
         transform.Rotate(v, h, 0);
     }
 }


Generate floor


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GenerateFloor : MonoBehaviour
{
    public int width = 50;
    public int breadth = 50;
    public GameObject floor_prefab;

    // Start is called before the first frame update
    void Start()
    {
        for (int i=-1*width; i<=width; i++)
        {
            for (int j=-1*breadth; j<=breadth; j++)
            {
                GameObject gameObject = Instantiate(floor_prefab, new Vector3(8 * i, 0, 8 * j), Quaternion.Euler(-90, 0, 0));
                gameObject.layer = 13; // Hides from minimap
                gameObject.transform.parent = transform;
            }
        }
        transform.position = new Vector3(0,0.02f,0);
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}

Game MAnager

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
public class GameManager : MonoBehaviour
{
	public float score=0;
	public int lives=6;
	public Text text_canvas;
	public Text GameOver;
    public Text RestartText;
	public int food;
	public Text Lives;
	public Transform Food;
	bool paused;
    // Start is called before the first frame update
    void Start()
    {
        food=87;
        Lives.text="Lives Remaining :"+lives;
        text_canvas.text= "Score :"+score.ToString();
         
    }

    // Update is called once per frame
    void Update()
    {
       
       if(Food.childCount==0){
        GameOver.text= "Game Completed";
        RestartText.text = "R to Restart";
        Time.timeScale=0;
       }
    	
        if (Input.GetKeyDown(KeyCode.P)) {
           if(paused){
           	Time.timeScale=1;
           	paused=false;
             
         }
         else{
         	Time.timeScale=0;
         	paused=true;
         }
           }
           if (Input.GetKeyDown(KeyCode.Q)) {
          
            Application.Quit();
          }
    }

    public void increaseScore(float val)
    {
    	score+=val;
    	text_canvas.text= "Score :"+score.ToString();
    		Debug.Log(score);
    }
    public void reset(){
    	
    	
    	lives--;
    	Lives.text="Lives Remaining :"+lives;
    		
    	if(lives<=0){
    		GameOver.text= "Game Over";
            RestartText.text = "R to Restart";
    		Time.timeScale=0;
    	}
    	
    }
   

     
}
Cam Script

using UnityEngine;
using System.Collections;

public class CamScript : MonoBehaviour {

    public GameObject player;       //Public variable to store a reference to the player game object

 	
    private Vector3 offset;         //Private variable to store the offset distance between the player and camera

    // Use this for initialization
    void Start () 
    {
        //Calculate and store the offset value by getting the distance between the player's position and camera's position.
        offset = transform.position - player.transform.position;
    }
    
    // LateUpdate is called after Update each frame
    void LateUpdate () 
    {
        // Set the position of the camera's transform to be the same as the player's, but offset by the calculated offset distance.
        transform.position = player.transform.position + offset;
        // if(Input.GetKeyDown(KeyCode.D)){
        // 	transform.Rotate(Vector3.up,-90);
        // }
        //transform.LookAt(mycam.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, mycam.nearClipPlane)), Vector3.up);
    }
   
        }


Baker.cs


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class baker : MonoBehaviour
{
	public NavMeshSurface nv;
    // Start is called before the first frame update
    void Awake()
    {
      //  nv = GetComponent<NavMeshSurface>();
    }

    void Start()
    {
    	nv.BuildNavMesh ();
    }
    // Update is called once per frame
    void Update()
    {
        
    }
}

Button Script

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;
public class ButtonScript : MonoBehaviour
{
	
private bool paused;
    // Start is called before the first frame update
    void Start()
    {
        
        paused = false;
    }

    // Update is called once per frame
    void Update()
    {
        
    }
    public void pausegame(){
    	print("ENTERED");
    	if(paused){
    		Time.timeScale=1;
    		paused=false;
    	}
    	else{
    		Time.timeScale=0;
    		paused=true;
    	}
    }
}


Cactus.cs


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Cactus : MonoBehaviour
{
	public float diff;
	bool re;
	private float wait;
    // Start is called before the first frame update
    void Start()
    {
        diff=-4.4f;
        re =false;
        wait=3f;
    }

    // Update is called once per frame
    void Update()
    {
    	if(!re){
    		if(wait>0){
        		wait-=0.1f;
        	}
        	else{
    		if(diff<=0){
        	 gameObject.transform.Translate(0, 0, 0.1f);
        	 diff+=0.1f;
        	}
        	else{
        		re=true;
        		wait=3f;
        	}
        }
    	}
        else{
        	if(wait>0){
        		wait-=0.1f;
        	}
        	else{
        		if(diff>=-4.4f){
	        	 gameObject.transform.Translate(0, 0, -0.1f);
	        	 diff-=0.1f;
	        	}
	        	else{
	        		re=false;
	        		wait=3f;
	        	}
        	}
        	
        }
    }
}

fooood.cs


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class fooooood : MonoBehaviour
{
	Vector3 originalPos;
    public GameManager gm;
   	
    void Start(){
    	originalPos = gameObject.transform.position;	
    }
   	
    public void OnTriggerEnter(Collider coll){
		      if(coll.gameObject.tag == "Food"){
		      	// Debug.Log("sssup");
		        Destroy(coll.gameObject);
		        gm.food--;
		        gm.increaseScore(1f);
		      }
		      if(coll.gameObject.tag == "Cherry"){
		      	// Debug.Log("sssup");
		        Destroy(coll.gameObject);
		        gm.food--;
		        gm.increaseScore(5f);
		      }
		      if(coll.gameObject.tag == "Enemy"){
		      	// Debug.Log("sssup");
		       	gameObject.transform.position = originalPos;
		        gm.reset();

		      }

		 }
		 
}



Movement



using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class MovementScript : MonoBehaviour
{
    public float speed;
    private int p;
    private Rigidbody rb;
    private bool canjump;
    public GameManager gm;
    // Start is called before the first frame update
    void Start()
    {
        canjump=true;
        rb = GetComponent<Rigidbody>();
    }

    // Update is called once per frame
    void Update()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");

        if (Input.GetKeyDown(KeyCode.R))
          {
            Time.timeScale=1;
            gm.food=87;
            SceneManager.LoadScene(0);

            }  

        if (Input.GetKeyDown ("space")) {
            if (canjump == true){
            Vector3 up = transform.TransformDirection (Vector3.up);
             rb.AddForce (up * 15, ForceMode.Impulse);
             canjump=false;
            }
             
         }
        if (Input.GetKeyDown(KeyCode.LeftControl)) {
             Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);

        rb.AddForce(movement * -speed);
             
         }
         else{
            Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);

        //rb.AddForce(rb.position + movement * speed);
            transform.Translate(movement * speed * Time.deltaTime);
            
         }
        if (transform.position.x >= 96)
        {
            transform.position = new Vector3(-77,transform.position.y,transform.position.z);
        }
        if (transform.position.x <= -80)
        {
            transform.position = new Vector3(94, transform.position.y, transform.position.z);
        }

    }
    public void OnTriggerEnter (Collider c) {
        if (c.gameObject.tag=="Static") {
            
            canjump = true;
            
        }
    }

}


Restart Script


using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class RestartScript : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.R))
            SceneManager.LoadScene(0);
    }
}




